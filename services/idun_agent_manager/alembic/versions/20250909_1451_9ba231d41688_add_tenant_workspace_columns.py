"""add tenant/workspace columns

Revision ID: 9ba231d41688
Revises: b67a410bce25
Create Date: 2025-09-09 14:51:49.692500+00:00
"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9ba231d41688'
down_revision: Union[str, None] = 'b67a410bce25'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('workspaces')
    op.drop_table('tenants')
    op.drop_table('workspace_users')
    op.drop_table('tenant_users')
    op.alter_column('agent_config', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('idx_agent_config_tenant'), table_name='agent_config')
    op.drop_index(op.f('uq_agent_config_tenant_name'), table_name='agent_config')
    op.create_index(op.f('ix_agent_config_tenant_id'), 'agent_config', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_agent_config_workspace_id'), 'agent_config', ['workspace_id'], unique=False)
    op.drop_constraint(op.f('fk_agent_config_tenant'), 'agent_config', type_='foreignkey')
    op.drop_constraint(op.f('fk_agent_config_workspace'), 'agent_config', type_='foreignkey')
    op.alter_column('artifacts', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('idx_artifacts_tenant'), table_name='artifacts')
    op.create_index(op.f('ix_artifacts_tenant_id'), 'artifacts', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_artifacts_workspace_id'), 'artifacts', ['workspace_id'], unique=False)
    op.drop_constraint(op.f('fk_artifacts_workspace'), 'artifacts', type_='foreignkey')
    op.drop_constraint(op.f('fk_artifacts_tenant'), 'artifacts', type_='foreignkey')
    op.alter_column('deployment_config', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('idx_deployment_config_tenant'), table_name='deployment_config')
    op.create_index(op.f('ix_deployment_config_tenant_id'), 'deployment_config', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_deployment_config_workspace_id'), 'deployment_config', ['workspace_id'], unique=False)
    op.drop_constraint(op.f('fk_deployment_config_tenant'), 'deployment_config', type_='foreignkey')
    op.drop_constraint(op.f('fk_deployment_config_workspace'), 'deployment_config', type_='foreignkey')
    op.alter_column('deployments', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('idx_deployments_tenant'), table_name='deployments')
    op.create_index(op.f('ix_deployments_tenant_id'), 'deployments', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_deployments_workspace_id'), 'deployments', ['workspace_id'], unique=False)
    op.drop_constraint(op.f('fk_deployments_tenant'), 'deployments', type_='foreignkey')
    op.drop_constraint(op.f('fk_deployments_workspace'), 'deployments', type_='foreignkey')
    op.add_column('engine', sa.Column('tenant_id', sa.UUID(), nullable=False))
    op.add_column('engine', sa.Column('workspace_id', sa.UUID(), nullable=True))
    op.create_index(op.f('ix_engine_tenant_id'), 'engine', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_engine_workspace_id'), 'engine', ['workspace_id'], unique=False)
    op.alter_column('gateway_routes', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('idx_gateway_routes_tenant'), table_name='gateway_routes')
    op.create_index(op.f('ix_gateway_routes_tenant_id'), 'gateway_routes', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_gateway_routes_workspace_id'), 'gateway_routes', ['workspace_id'], unique=False)
    op.drop_constraint(op.f('fk_gateway_routes_workspace'), 'gateway_routes', type_='foreignkey')
    op.drop_constraint(op.f('fk_gateway_routes_tenant'), 'gateway_routes', type_='foreignkey')
    op.alter_column('managed_agent', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('idx_managed_agent_tenant'), table_name='managed_agent')
    op.create_index(op.f('ix_managed_agent_tenant_id'), 'managed_agent', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_managed_agent_workspace_id'), 'managed_agent', ['workspace_id'], unique=False)
    op.drop_constraint(op.f('fk_managed_agent_tenant'), 'managed_agent', type_='foreignkey')
    op.drop_constraint(op.f('fk_managed_agent_workspace'), 'managed_agent', type_='foreignkey')
    op.alter_column('retriever_config', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('idx_retriever_config_tenant'), table_name='retriever_config')
    op.create_index(op.f('ix_retriever_config_tenant_id'), 'retriever_config', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_retriever_config_workspace_id'), 'retriever_config', ['workspace_id'], unique=False)
    op.drop_constraint(op.f('fk_retriever_config_tenant'), 'retriever_config', type_='foreignkey')
    op.drop_constraint(op.f('fk_retriever_config_workspace'), 'retriever_config', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key(op.f('fk_retriever_config_workspace'), 'retriever_config', 'workspaces', ['workspace_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_retriever_config_tenant'), 'retriever_config', 'tenants', ['tenant_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_retriever_config_workspace_id'), table_name='retriever_config')
    op.drop_index(op.f('ix_retriever_config_tenant_id'), table_name='retriever_config')
    op.create_index(op.f('idx_retriever_config_tenant'), 'retriever_config', ['tenant_id'], unique=False)
    op.alter_column('retriever_config', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_foreign_key(op.f('fk_managed_agent_workspace'), 'managed_agent', 'workspaces', ['workspace_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_managed_agent_tenant'), 'managed_agent', 'tenants', ['tenant_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_managed_agent_workspace_id'), table_name='managed_agent')
    op.drop_index(op.f('ix_managed_agent_tenant_id'), table_name='managed_agent')
    op.create_index(op.f('idx_managed_agent_tenant'), 'managed_agent', ['tenant_id'], unique=False)
    op.alter_column('managed_agent', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_foreign_key(op.f('fk_gateway_routes_tenant'), 'gateway_routes', 'tenants', ['tenant_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key(op.f('fk_gateway_routes_workspace'), 'gateway_routes', 'workspaces', ['workspace_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_gateway_routes_workspace_id'), table_name='gateway_routes')
    op.drop_index(op.f('ix_gateway_routes_tenant_id'), table_name='gateway_routes')
    op.create_index(op.f('idx_gateway_routes_tenant'), 'gateway_routes', ['tenant_id'], unique=False)
    op.alter_column('gateway_routes', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('ix_engine_workspace_id'), table_name='engine')
    op.drop_index(op.f('ix_engine_tenant_id'), table_name='engine')
    op.drop_column('engine', 'workspace_id')
    op.drop_column('engine', 'tenant_id')
    op.create_foreign_key(op.f('fk_deployments_workspace'), 'deployments', 'workspaces', ['workspace_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_deployments_tenant'), 'deployments', 'tenants', ['tenant_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_deployments_workspace_id'), table_name='deployments')
    op.drop_index(op.f('ix_deployments_tenant_id'), table_name='deployments')
    op.create_index(op.f('idx_deployments_tenant'), 'deployments', ['tenant_id'], unique=False)
    op.alter_column('deployments', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_foreign_key(op.f('fk_deployment_config_workspace'), 'deployment_config', 'workspaces', ['workspace_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_deployment_config_tenant'), 'deployment_config', 'tenants', ['tenant_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_deployment_config_workspace_id'), table_name='deployment_config')
    op.drop_index(op.f('ix_deployment_config_tenant_id'), table_name='deployment_config')
    op.create_index(op.f('idx_deployment_config_tenant'), 'deployment_config', ['tenant_id'], unique=False)
    op.alter_column('deployment_config', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_foreign_key(op.f('fk_artifacts_tenant'), 'artifacts', 'tenants', ['tenant_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key(op.f('fk_artifacts_workspace'), 'artifacts', 'workspaces', ['workspace_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_artifacts_workspace_id'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_tenant_id'), table_name='artifacts')
    op.create_index(op.f('idx_artifacts_tenant'), 'artifacts', ['tenant_id'], unique=False)
    op.alter_column('artifacts', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_foreign_key(op.f('fk_agent_config_workspace'), 'agent_config', 'workspaces', ['workspace_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_agent_config_tenant'), 'agent_config', 'tenants', ['tenant_id'], ['id'], ondelete='RESTRICT')
    op.drop_index(op.f('ix_agent_config_workspace_id'), table_name='agent_config')
    op.drop_index(op.f('ix_agent_config_tenant_id'), table_name='agent_config')
    op.create_index(op.f('uq_agent_config_tenant_name'), 'agent_config', ['tenant_id', 'name'], unique=True)
    op.create_index(op.f('idx_agent_config_tenant'), 'agent_config', ['tenant_id'], unique=False)
    op.alter_column('agent_config', 'tenant_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_table('tenant_users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'member'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('tenant_users_tenant_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('tenant_users_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('tenant_users_pkey')),
    sa.UniqueConstraint('tenant_id', 'user_id', name=op.f('tenant_users_tenant_id_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('workspace_users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workspace_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'member'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('workspace_users_user_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], name=op.f('workspace_users_workspace_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('workspace_users_pkey')),
    sa.UniqueConstraint('workspace_id', 'user_id', name=op.f('workspace_users_workspace_id_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('tenants',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('plan', sa.TEXT(), server_default=sa.text("'free'::text"), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'active'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tenants_pkey'),
    sa.UniqueConstraint('slug', name='tenants_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('workspaces',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'active'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('workspaces_tenant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('workspaces_pkey')),
    sa.UniqueConstraint('tenant_id', 'slug', name=op.f('workspaces_tenant_id_slug_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###


