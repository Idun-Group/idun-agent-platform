version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: idun_agents
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - idun_network

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - idun_network

  # Traefik Gateway
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
    ports:
      - "80:80"       # HTTP
      - "443:443"     # HTTPS
      - "8080:8080"   # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
    networks:
      - idun_network

  # Development container - runs the FastAPI server
  agent-manager-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - DATABASE__URL=postgresql+asyncpg://postgres:postgres@postgres:5432/idun_agents
      - REDIS__URL=redis://redis:6379/0
      - AUTH__SECRET_KEY=your-super-secret-key-at-least-32-characters-long-dev
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app/src
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
      # Persist Poetry cache and virtual environment
      - poetry_cache:/root/.cache/pypoetry
      - poetry_venv:/app/.venv
    working_dir: /app
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agent-manager.rule=Host(`api.localhost`)"
      - "traefik.http.routers.agent-manager.entrypoints=web"
      - "traefik.http.services.agent-manager.loadbalancer.server.port=8000"
    networks:
      - idun_network

  # CLI container for running commands (migrations, tests, etc.)
  agent-manager-cli:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - DATABASE__URL=postgresql+asyncpg://postgres:postgres@postgres:5432/idun_agents
      - REDIS__URL=redis://redis:6379/0
      - AUTH__SECRET_KEY=your-super-secret-key-at-least-32-characters-long-dev
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONPATH=/app/src
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount source code
      - ./src:/app/src
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
      - ./tests:/app/tests
      # Persist Poetry cache and virtual environment
      - poetry_cache:/root/.cache/pypoetry
      - poetry_venv:/app/.venv
    working_dir: /app
    # Keep container running for exec commands
    command: tail -f /dev/null
    profiles:
      - cli
    networks:
      - idun_network

volumes:
  postgres_data:
  redis_data:
  poetry_cache:
  poetry_venv:

networks:
  idun_network:
    driver: bridge 